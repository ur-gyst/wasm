# format I CB [L0 L1 ...] V0 V1 ...; I integer part, CB control byte, Li no. of bits > 7f, Vj value bits
00 61 73 6d # asm
01 00 00 00 # ver

01 # section code (type)
0c # section size
02 # num of types
60 # func
02 # num of params
7f # i32
7f # i32
00 # num of results
60 # func
02 # num of params
7f # i32
7f # i32
01 # num of results
7f # i32

02       # section code (import)
0b       # section size
01       # num of imports
02       # mod length
6a 73    # 'js'
03       # nm length
6d 65 6d # 'mem'
02       # memtype
00 01    # limits

03 # section code (function)
03 # section size
02 # num of functions
00 # function index
01 # function index

07       # section code (export)
07       # section size
01       # num of exports
03       # nm length
72 75 6e # 'run'
00       # function
00       # funcidx

# nk(p0),p(p1),k(l2),mi(l3),sk(l4),scratch(l5),scratch(l6),scratch(l7)

0a          # section code (code)
bd 01       # section size
02          # num of functions
ab 01       # function body size
01          # local declaration count
06 7f       # local type count & type (i32)
41 20       # i32.const 20
20 00       # local.get 00
67          # i32.clz
6b          # i32.sub
41 01       # i32.const 01
76          # i32.shr_u
41 01       # i32.const 01
6a          # i32.add
21 02       # local.set 02
03 40       # loop & type
20 02       # local.get 02
41 01       # i32.const 01
6b          # i32.sub
21 02       # local.set 02
20 04       # local.get 04
20 02       # local.get 02
74          # i32.shl
41 01       # i32.const 01
74          # i32.shl
41 01       # i32.const 01
20 02       # local.get 02
74          # i32.shl
20 02       # local.get 02
74          # i32.shl
6a          # i32.add
21 05       # local.set 05
20 00       # local.get 00
20 05       # local.get 05
4f          # i32.ge_u
04 40       # if & type
20 00       # local.get 00
20 05       # local.get 05
6b          # i32.sub
21 00       # local.set 00
20 04       # local.get 04
41 01       # i32.const 01
20 02       # local.get 02
74          # i32.shl
6a          # i32.add
21 04       # local.set 04
0b          # end
20 02       # local.get 02
41 00       # i32.const 00
4b          # i32.gt_u
0d 00       # br_if & depth
0b          # end
20 03       # local.get 03
20 04       # local.get 04
10 01       # call 01
21 03       # local.set 03
03 40       # loop & type
20 02       # local.get 02
41 01       # i32.const 01
6a          # i32.add
21 02       # local.set 02
20 00       # local.get 00
41 02       # i32.const 02
74          # i32.shl
21 00       # local.set 00
20 04       # local.get 04
41 01       # i32.const 01
74          # i32.shl
21 04       # local.set 04
20 00       # local.get 00
20 04       # local.get 04
41 01       # i32.const 01
74          # i32.shl
41 01       # i32.const 01
6a          # i32.add
4f          # i32.ge_u
04 40       # if & type
20 00       # local.get 00
20 04       # local.get 04
41 01       # i32.const 01
74          # i32.shl
41 01       # i32.const 01
6a          # i32.add
6b          # i32.sub
21 00       # local.set 00
20 04       # local.get 04
41 01       # i32.const 01
6a          # i32.add
21 04       # local.set 04
0b          # end
20 02       # local.get 02
41 08       # i32.const 80 80 01 (2000); test with 08 (1 byte)
49          # i32.lt_u
0d 00       # br_if & depth
0b          # end
20 03       # local.get 03
20 02       # local.get 02
41 03       # i32.const 03
76          # i32.shr_u
10 01       # call 01
21 03       # local.set 03
20 03       # local.get 03
20 04       # local.get 04
10 01       # call 01
21 03       # local.set 03
0b          # end

0e    # function body size
00    # local declaration size
20 00 # local.get 00
20 01 # local.get 01
3a    # i32.store8
00 00 # alignment & offset
20 00 # local.get 00
41 01 # i32.const 01
6a    # i32.add
0b    # end




































# sectionN(B) ::= N:byte size:u32 cont:B
# vec(B)      ::= n:u32 (x:B)n
#
# customsec   ::= section0(custom)
# custom      ::= name byte*
# name        ::= b*:vec(byte)
# byte        ::= 0x00 | ... | 0xff
#
# typesec     ::= ft*:section1(vec(functype))
# functype    ::= 0x60 rt1:resulttype rt2:resulttype
# resulttype  ::= t*:vec(valtype)
# valtype     ::= 0x7f | 0x7e | 0x7d | 0x7c
#
# importsec   ::= im*:section2(vec(import))
# import      ::= mod:name nm:name d:importdesc
# importdesc  ::= 0x00 x:typeidx | 0x01 tt:tabletype | 0x02 mt:memtype | 0x03 gt:globaltype
# typeidx     ::= x:u32
# tabletype   ::= et:elemtype lim:limits
# elemtype    ::= 0x70
# memtype     ::= lim:limits
# globaltype  ::= t:valtype m:mut
# mut         ::= 0x00 | 0x01
# limits      ::= 0x00 n:u32 | 0x01 n:u32 m:u32
#
# funcsec     ::= x*:section3(vec(typeidx))
#
# tablesec    ::= tab*:section4(vec(table))
# table       ::= tt:tabletype
#
# memsec      ::= mem*:section5(vec(mem))
# mem         ::= mt:memtype
#
# globalsec   ::= glob*:section6(vec(global))
# global      ::= gt:globaltype e:expr
# expr        ::= (in:instr)* 0x0b
# instr       ::= 0x00 | 0x01 | 0x02 bt:blocktype (in:instr)* 0x0b | 0x03 bt:blocktype (in:instr)* 0x0b | 0x04 bt:blocktype (in1:instr)* 0x05 (in2:instr)* 0x0b | 0x0c l:labelidx | 0x0d l:labelidx | 0x0e l*:vec(labelidx) lN:labelidx | 0x0f | 0x10 x:funcidx | 0x11 x:typeidx 0x00
# blocktype   ::= 0x40 | t:valtype | x:s33
# labelidx    ::= l:u32
# funcidx     ::= x:u32
#
# exportsec   ::= cx*:section7(vec(export))
# export      ::= nm:name d:exportdesc
# exportdesc  ::= 0x00 x:funcidx | 0x01x:tableidx | 0x02 x:memidx | 0x03 x:globalidx
# tableidx    ::= x:u32
# memidx      ::= x:u32
# globalidx   ::= x:u32
#
# startsec    ::= st?:section8(start)
# start       ::= x:funcidx
# funcidx     ::= x:u32
#
# elemsec     ::= seg*:section9(vec(elem))
# elem        ::= x:tabledix e:expr y*:vec(funcidx)
#
# codesec     ::= code*:sectiona(vec(code))
# code        ::= size:u32 code:func
# func        ::= (t*)*:vec(locals) e:expr
# locals      ::= n:u32 t:valtype
#
# datasec     ::= seg*:sectionb(vec(data))
# data        ::= x:memidx e:expr b*:vec(byte)
#
# localidxn   ::= u32
#
# dup         ::= local.tee localidx0 local.get localidx0
#
# swap        ::= local.set localidx0 local.set localidx1 local.get localidx0 local.get localidx1
#
# rot         ::= local.set localidx0 local.set localidx1  local.set localidx2 local.get localidx1 local.get localidx0 local.get localidx2
#
# 2swap       ::= local.set localidx0 local.set localidx1 local.set localidx2 local.set localidx3 local.get localidx1  local.get localidx0  local.get localidx3  local.get localidx2
#
# calling function f(p0,p1): push p0, push p1, call functionidx, inside f(p0,p1): local.get 00 (p0), local.get 01 (p1)
#
# 00 unreachable
# 01 nop
# 02 block
# 03 loop
# 04 if
# 05 else
# 0b end
# 0c br
# 0d br_if
# 0e br_table
# 0f return
# 10 call
# 11 call_indirect
# 1a drop
# 1b select
# 20 local.get
# 21 local.set
# 22 local.tee
# 23 global.get
# 24 global.set
# 28 i32.load
# 29 i64.load
# 2a f32.load
# 2b f64.load
# 2c i32.load8_s
# 2d i32.load8_u
# 2e i32.load16_s
# 2f i32.load16_u
# 30 i64.load8_s
# 31 i64.load8_u
# 32 i64.load16_s
# 33 i64.load16_u
# 34 i64.load32_s
# 35 i64.load32_u
# 36 i32.store
# 37 i64.store
# 38 f32.store
# 39 f64.store
# 3a i32.store8
# 3b i32.store16
# 3c i64.store8
# 3d i64.store16
# 3e i64.store32
# 3f memory.size
# 40 memory.grow
# 41 i32.const
# 42 i64.const
# 43 f32.const
# 44 f64.const
# 45 i32.eqz
# 46 i32.eq
# 47 i32.ne
# 48 i32.lt_s
# 49 i32.lt_u
# 4a i32.gt_s
# 4b i32.gt_u
# 4c i32.le_s
# 4d i32.le_u
# 4e i32.ge_s
# 4f i32.ge_u
# 50 i64.eqz
# 51 i64.eq
# 52 i64.ne
# 53 i64.lt_s
# 54 i64.lt_u
# 55 i64.gt_s
# 56 i64.gt_u
# 57 i64_le_s
# 58 i64_le_u
# 59 i64_ge_s
# 5a i64_ge_u
# 5b f32.eq
# 5c f32.ne
# 5d f32.lt
# 5e f32.gt
# 5f f32.le
# 60 f32.ge
# 61 f64.eq
# 62 f64.ne
# 63 f64.lt
# 64 f64.gt
# 65 f64.le
# 66 f64.ge
# 67 i32.clz
# 68 i32.ctz
# 69 i32.popcnt
# 6a i32.add
# 6b i32.sub
# 6c i32.mul
# 6d i32.div_s
# 6e i32.div_u
# 6f i32.rem_s
# 70 i32.rem_u
# 71 i32.and
# 72 i32.or
# 73 i32.xor
# 74 i32.shl
# 75 i32.shr_s
# 76 i32.shr_u
# 77 i32.rotl
# 78 i32.rotr
# 79 i64.clz
# 7a i64.ctz
# 7b i64.popcnt
# 7c i64.add
# 7d i64.sub
# 7e i64.mul
# 7f i64.div_s
# 80 i64.div_u
# 81 i64.rem_s
# 82 i64.rem_u
# 83 i64.and
# 84 i64.or
# 85 i64.xor
# 86 i64.shl
# 87 i64.shr_s
# 88 i64.shr_u
# 89 i64.rotl
# 8a i64.rotr
# 8b f32.abs
# 8c f32.neg
# 8d f32.ceil
# 8e f32.floor
# 8f f32.trunc
# 90 f32.nearest
# 91 f32.sqrt
# 92 f32.add
# 93 f32.sub
# 94 f32.mul
# 95 f32.div
# 96 f32.min
# 97 f32.max
# 98 f32.copysign
# 99 f64.abs
# 9a f64.neg
# 9b f64.ceil
# 9c f64.floor
# 9d f64.trunc
# 9e f64.nearest
# 9f f64.sqrt
# a0 f64.add
# a1 f64.sub
# a2 f64.mul
# a3 f64.div
# a4 f64.min
# a5 f64.max
# a6 f64.copysign
# a7 i32.wrap_i64
# a8 i32.trunc_f32_s
# a9 i32.trunc_f32_u
# aa i32.trunc_f64_s
# ab i32.trunc_f64_u
# ac i64.extend_i32_s
# ad i64.extend_i32_u
# ae i64.trunc_f32_s
# af i64.trunc_f32_u
# b0 i64.trunc_f64_s
# b1 i64.trunc_f64_u
# b2 f32.convert_i32_s
# b3 f32.convert_i32_u